/**********************************************************************************
BSD 3-Clause License

Copyright (c) 2020, Orso Eric
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice, this
   list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
   this list of conditions and the following disclaimer in the documentation
   and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its
   contributors may be used to endorse or promote products derived from
   this software without specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
**********************************************************************************/

/**********************************************************************************
**  ENVIROMENT VARIABILE
**********************************************************************************/

#ifndef VNH7040_HPP_
    #define VNH7040_HPP_

/**********************************************************************************
**  GLOBAL INCLUDES
**********************************************************************************/

//Longan Nano GD32VF103 HAL
#include <gd32vf103.h>

/**********************************************************************************
**  DEFINES
**********************************************************************************/

//Enable the file trace debugger
//#define ENABLE_DEBUG
//file trace debugger
#ifdef ENABLE_DEBUG
    #include <cstdio.h> 
    #include "debug.h"
#endif
//If DEBUG is not needed, blank out the implementations
#ifndef DEBUG_H_
    #define DEBUG_VARS_PROTOTYPES()
    #define DEBUG_VARS()
    #define DSHOW( ... )
    #define DSTART( ... )
    #define DSTOP()
    #define DTAB( ... )
    #define DPRINT( ... )
    #define DPRINT_NOTAB( ... )
    #define DENTER( ... )
    #define DRETURN( ... )
    #define DENTER_ARG( ... )
    #define DRETURN_ARG( ... )
#endif

/**********************************************************************************
**  MACROS
**********************************************************************************/

/**********************************************************************************
**  NAMESPACE
**********************************************************************************/

//! @namespace Longan_nano board namespace
namespace Longan_nano
{

/**********************************************************************************
**  TYPEDEFS
**********************************************************************************/

/**********************************************************************************
**  PROTOTYPE: STRUCTURES
**********************************************************************************/

/**********************************************************************************
**  PROTOTYPE: GLOBAL VARIABILES
**********************************************************************************/

/**********************************************************************************
**  PROTOTYPE: CLASS
**********************************************************************************/

/************************************************************************************/
//! @class      VNH7040
/************************************************************************************/
//!	@author     Orso Eric
//! @version    2020-08-20
//! @brief      Interface with a VNH7040 DC motor H bridge
//! @copyright  BSD 3-Clause License Copyright (c) 2020, Orso Eric
//! @details
//! \n      2020-08-20
//! \n  Initial Release
//! \n      2021-03-07
//! \n  Added pin configuration inside enum Config
//! \n  Moved INA_SEL0 from B5 to B11 to avoid collision with encoder CH1 pin
/************************************************************************************/

class VNH7040
{
    //Visible to all
    public:
        /*********************************************************************************************************************************************************
        **********************************************************************************************************************************************************
        **  PUBLIC ENUMS
        **********************************************************************************************************************************************************
        *********************************************************************************************************************************************************/
    
        //! @brief Configurations of the class
        typedef enum _Config
        {
            SAFETY_CHECK = true,
            PEDANTIC_CHECKS = true,
            //VNH7040 Connection
            PORT_INA_SEL0 = GPIOB,
            PIN_INA_SEL0 = GPIO_PIN_11,
            PORT_INB = GPIOB,
            PIN_INB = GPIO_PIN_7,
            PORT_SEL1 = GPIOB,
            PIN_SEL1 = GPIO_PIN_8,
            PORT_MSENSE = GPIOB,
            PIN_MSENSE = GPIO_PIN_9,
            //VNH7040 PWM Generator
            PORT_PWM = GPIOB,
            PIN_PWM = GPIO_PIN_6,
            TIMER_PWM = TIMER3,
            TIMER_PWM_CHANNEL = TIMER_CH_0,
        } Config;
        
        //! @brief Error codes of the class
        typedef enum _Error_code
        {
            OK,             //OK
            RECOVERY_FAIL,  //error_recovery() failed to recover from an error
        } Error_code;

        /*********************************************************************************************************************************************************
        **********************************************************************************************************************************************************
        **  PUBLIC TYPEDEFS
        **********************************************************************************************************************************************************
        *********************************************************************************************************************************************************/
        
        /*********************************************************************************************************************************************************
        **********************************************************************************************************************************************************
        **  CONSTRUCTORS
        **********************************************************************************************************************************************************
        *********************************************************************************************************************************************************/

        //Empty Constructor
        VNH7040( void );

        /*********************************************************************************************************************************************************
        **********************************************************************************************************************************************************
        **  DESTRUCTORS
        **********************************************************************************************************************************************************
        *********************************************************************************************************************************************************/

        //Empty destructor
        ~VNH7040( void );

        /*********************************************************************************************************************************************************
        **********************************************************************************************************************************************************
        **  PUBLIC OPERATORS
        **********************************************************************************************************************************************************
        *********************************************************************************************************************************************************/

        /*********************************************************************************************************************************************************
        **********************************************************************************************************************************************************
        **  PUBLIC SETTERS
        **********************************************************************************************************************************************************
        *********************************************************************************************************************************************************/

        //Set speed. -32767 = 100% backward | +32767 = 100% forward
        bool set_speed( int16_t speed );

        /*********************************************************************************************************************************************************
        **********************************************************************************************************************************************************
        **  PUBLIC GETTERS
        **********************************************************************************************************************************************************
        *********************************************************************************************************************************************************/

        //Get current error state of the library
        Error_code get_error( void );

        /*********************************************************************************************************************************************************
        **********************************************************************************************************************************************************
        **  PUBLIC TESTERS
        **********************************************************************************************************************************************************
        *********************************************************************************************************************************************************/

        /*********************************************************************************************************************************************************
        **********************************************************************************************************************************************************
        **  PUBLIC METHODS
        **********************************************************************************************************************************************************
        *********************************************************************************************************************************************************/

        //Initialize VNH7040 and all related peripherals
        bool init( void );

        /*********************************************************************************************************************************************************
        **********************************************************************************************************************************************************
        **  PUBLIC STATIC METHODS
        **********************************************************************************************************************************************************
        *********************************************************************************************************************************************************/

        /*********************************************************************************************************************************************************
        **********************************************************************************************************************************************************
        **  PUBLIC VARS
        **********************************************************************************************************************************************************
        *********************************************************************************************************************************************************/

    //Visible to derived classes
    protected:
        /*********************************************************************************************************************************************************
        **********************************************************************************************************************************************************
        **  PROTECTED METHODS
        **********************************************************************************************************************************************************
        *********************************************************************************************************************************************************/

        /*********************************************************************************************************************************************************
        **********************************************************************************************************************************************************
        **  PROTECTED VARS
        **********************************************************************************************************************************************************
        *********************************************************************************************************************************************************/

    //Visible only inside the class
    private:
        /*********************************************************************************************************************************************************
        **********************************************************************************************************************************************************
        **	PRIVATE ENUM
        **********************************************************************************************************************************************************
        *********************************************************************************************************************************************************/
        
        /*********************************************************************************************************************************************************
        **********************************************************************************************************************************************************
        **	PRIVATE TYPEDEFS
        **********************************************************************************************************************************************************
        *********************************************************************************************************************************************************/
    
        /*********************************************************************************************************************************************************
        **********************************************************************************************************************************************************
        **	PRIVATE INIT
        **********************************************************************************************************************************************************
        *********************************************************************************************************************************************************/
        
        //Initialize class vars
        bool init_class_vars( void );
        
        /*********************************************************************************************************************************************************
        **********************************************************************************************************************************************************
        **	PRIVATE METHODS
        **********************************************************************************************************************************************************
        *********************************************************************************************************************************************************/
        
        //Report an error. return false: OK | true: Unknown error code 
        bool report_error( Error_code error_code_tmp );
        //Tries to recover from an error. Automatically called by get_error. return false = OK | true = fail
        bool error_recovery( void );

        //VNH7040 method to copy the code
        bool dummy( void );

        /*********************************************************************************************************************************************************
        **********************************************************************************************************************************************************
        **	PRIVATE VARS
        **********************************************************************************************************************************************************
        *********************************************************************************************************************************************************/

        //! @brief Error code of the class
        Error_code g_error;

};	//End Class: VNH7040

/*********************************************************************************************************************************************************
**********************************************************************************************************************************************************
**	CONSTRUCTORS
**********************************************************************************************************************************************************
*********************************************************************************************************************************************************/

/***************************************************************************/
//! @brief Constructor
//! \n VNH7040 | void
/***************************************************************************/
// @param
//! @return no return
//! @details
//! \n Empty constructor
/***************************************************************************/

VNH7040::VNH7040( void )
{
    DENTER();   //Trace Enter
    ///--------------------------------------------------------------------------
    ///	BODY
    ///--------------------------------------------------------------------------

    //Initialize class vars
    this -> init_class_vars();

    ///--------------------------------------------------------------------------
    ///	RETURN
    ///--------------------------------------------------------------------------
    DRETURN();  //Trace Return
    return;
}   //end constructor: VNH7040 | void

/*********************************************************************************************************************************************************
**********************************************************************************************************************************************************
**	DESTRUCTORS
**********************************************************************************************************************************************************
*********************************************************************************************************************************************************/

/***************************************************************************/
//!	@brief Destructor
//! \n VNH7040 | void
/***************************************************************************/
// @param
//! @return no return
//! @details
//! \n Empty destructor
/***************************************************************************/

VNH7040::~VNH7040( void )
{
    DENTER();		//Trace Enter
    ///--------------------------------------------------------------------------
    ///	VARS
    ///--------------------------------------------------------------------------

    ///--------------------------------------------------------------------------
    ///	INIT
    ///--------------------------------------------------------------------------

    ///--------------------------------------------------------------------------
    ///	BODY
    ///--------------------------------------------------------------------------

    ///--------------------------------------------------------------------------
    ///	RETURN
    ///--------------------------------------------------------------------------
    DRETURN();      //Trace Return
    return;         //OK
}   //end destructor: VNH7040 | void

/*********************************************************************************************************************************************************
**********************************************************************************************************************************************************
**	PUBLIC SETTERS
**********************************************************************************************************************************************************
*********************************************************************************************************************************************************/

/***************************************************************************/
//! @brief Private method
//! \n set_speed | int16_t |
/***************************************************************************/
//! @param speed | int16_t | -32767 = 100% backward | +32767 = 100% forward
//! @return bool | false = OK | true = FAIL |
//! @details
//! \n Set speed. 
/***************************************************************************/

inline bool VNH7040::set_speed( int16_t speed )
{
    DENTER_ARG("speed: %d", speed ); //Trace Enter
    ///--------------------------------------------------------------------------
    ///	CHECK
    ///--------------------------------------------------------------------------

    //If: bad speed
    if (speed == INT16_MIN)
    {
        DRETURN_ARG("ERR: bad argument\n");
        return true;   
    }

    ///--------------------------------------------------------------------------
    ///	COMPUTE DIRECTION
    ///--------------------------------------------------------------------------
    
    int_fast32_t tmp;
    if (speed < 0)
    {
        gpio_bit_write( Config::PORT_INA_SEL0, Config::PIN_INA_SEL0, (bit_status)FlagStatus::SET );
        gpio_bit_write( Config::PORT_INB, Config::PIN_INB, (bit_status)FlagStatus::RESET );
        tmp = -speed;
    }
    else
    {
        gpio_bit_write( Config::PORT_INA_SEL0, Config::PIN_INA_SEL0, (bit_status)FlagStatus::RESET );
        gpio_bit_write( Config::PORT_INB, Config::PIN_INB, (bit_status)FlagStatus::SET );
        tmp = speed;
    }

    tmp = tmp *5399/32768;
    timer_channel_output_pulse_value_config( Config::TIMER_PWM, Config::TIMER_PWM_CHANNEL, tmp);

    ///--------------------------------------------------------------------------
    ///	BODY
    ///--------------------------------------------------------------------------

    ///--------------------------------------------------------------------------
    ///	RETURN
    ///--------------------------------------------------------------------------
    DRETURN(); //Trace Return
    return false;	//OK
}   //end public setter: set_speed | int16_t |

/*********************************************************************************************************************************************************
**********************************************************************************************************************************************************
**	PUBLIC GETTERS
**********************************************************************************************************************************************************
*********************************************************************************************************************************************************/

/***************************************************************************/
//! @brief Public getter
//! \n get_error | void |
/***************************************************************************/
//! @return Error_code
//! @details
//! \n Get current error state of the library
//! \n Try to recover from errors
/***************************************************************************/

inline VNH7040::Error_code VNH7040::get_error( void )
{
    DENTER(); //Trace Enter
    ///--------------------------------------------------------------------------
    ///	BODY
    ///--------------------------------------------------------------------------

    //Fetch error
    Error_code err_code = this -> g_error;
    //Try to recover from error
    bool f_ret = this -> error_recovery();
    //If: failed to recover
    if (f_ret == true)
    {
        //Do nothing
    }

    ///--------------------------------------------------------------------------
    ///	RETURN
    ///--------------------------------------------------------------------------
    DRETURN(); //Trace Return
    return err_code; //OK
}   //end getter: get_error | void |

/*********************************************************************************************************************************************************
**********************************************************************************************************************************************************
**	PUBLIC METHODS
**********************************************************************************************************************************************************
*********************************************************************************************************************************************************/

/***************************************************************************/
//! @brief public method
//! \n init | void
/***************************************************************************/
// @param
//! @return no return
//! @details
//! \n f_pwm = SystemCoreClock / prescaler / period
//! \n f_pwm = 20KHz
//! \n period = 1. TOP = 5399
/***************************************************************************/

bool VNH7040::init( void )
{
    DENTER(); //Trace Enter
    ///--------------------------------------------------------------------------
    ///	VARS
    ///--------------------------------------------------------------------------

    ///--------------------------------------------------------------------------
    ///	INIT
    ///--------------------------------------------------------------------------

    ///--------------------------------------------------------------------------
    ///	BODY
    ///--------------------------------------------------------------------------

    rcu_periph_clock_enable(RCU_GPIOB);
    rcu_periph_clock_enable(RCU_AF);

    //PB5 CTRLA: INA, SEL0 
    gpio_init( Config::PORT_INA_SEL0, GPIO_MODE_OUT_PP, GPIO_OSPEED_50MHZ, Config::PIN_INA_SEL0 );
    //PB7 CTRLB:INB
    gpio_init( Config::PORT_INB, GPIO_MODE_OUT_PP, GPIO_OSPEED_50MHZ, Config::PIN_INB );
    //PB8 CTRLC: SEL1
    gpio_init( Config::PORT_SEL1, GPIO_MODE_OUT_PP, GPIO_OSPEED_50MHZ, Config::PIN_SEL1 );
    //PB9 CTRLD: MSENSE
    gpio_init( Config::PORT_MSENSE, GPIO_MODE_OUT_PP, GPIO_OSPEED_50MHZ, Config::PIN_MSENSE );

    gpio_bit_write( Config::PORT_INA_SEL0, Config::PIN_INA_SEL0, (bit_status)FlagStatus::RESET );
    gpio_bit_write( Config::PORT_INB, Config::PIN_INB, (bit_status)FlagStatus::RESET );

    //CTRLC sense current
    gpio_bit_write( Config::PORT_SEL1, Config::PIN_SEL1, (bit_status)FlagStatus::RESET );
    //CTRLD sense enable
    gpio_bit_write( Config::PORT_MSENSE, Config::PIN_MSENSE, (bit_status)FlagStatus::SET );

    //PB6 Timer3 CH0 as PWM out
    gpio_init( Config::PORT_PWM, GPIO_MODE_AF_PP, GPIO_OSPEED_50MHZ, Config::PIN_PWM );
    

    timer_oc_parameter_struct timer_ocinitpara;
    timer_parameter_struct timer_initpara;

    uint32_t timer = Config::TIMER_PWM;

    rcu_periph_clock_enable(RCU_TIMER3);

    timer_deinit(timer);
    
    timer_struct_para_init(&timer_initpara);
    
    
    timer_initpara.prescaler         = 0;
    timer_initpara.alignedmode       = TIMER_COUNTER_EDGE;
    timer_initpara.counterdirection  = TIMER_COUNTER_UP;
    timer_initpara.period            = 5399;
    timer_initpara.clockdivision     = TIMER_CKDIV_DIV1;
    timer_initpara.repetitioncounter = 0;
    timer_init(timer, &timer_initpara);

    /* initialize TIMER channel output parameter struct */
    timer_channel_output_struct_para_init(&timer_ocinitpara);
    /* CH0, CH1 and CH2 configuration in PWM mode */
    timer_ocinitpara.outputstate  = TIMER_CCX_ENABLE;
    timer_ocinitpara.outputnstate = TIMER_CCXN_DISABLE;
    timer_ocinitpara.ocpolarity   = TIMER_OC_POLARITY_HIGH;
    timer_ocinitpara.ocnpolarity  = TIMER_OCN_POLARITY_HIGH;
    timer_ocinitpara.ocidlestate  = TIMER_OC_IDLE_STATE_LOW;
    timer_ocinitpara.ocnidlestate = TIMER_OCN_IDLE_STATE_LOW;

    timer_channel_output_config(timer, Config::TIMER_PWM_CHANNEL, &timer_ocinitpara);

    //0% PWM
    timer_channel_output_pulse_value_config(timer, Config::TIMER_PWM_CHANNEL, 0);
    timer_channel_output_mode_config(timer, Config::TIMER_PWM_CHANNEL, TIMER_OC_MODE_PWM0);
    timer_channel_output_shadow_config(timer, Config::TIMER_PWM_CHANNEL, TIMER_OC_SHADOW_DISABLE);


    /* auto-reload preload enable */
    timer_auto_reload_shadow_enable(timer);
    /* auto-reload preload enable */
    timer_enable(timer);






    ///--------------------------------------------------------------------------
    ///	RETURN
    ///--------------------------------------------------------------------------
    DRETURN(); //Trace Return
    return false;	//OK
}   //end public method: init | void |

/*********************************************************************************************************************************************************
**********************************************************************************************************************************************************
**	PRIVATE INIT
**********************************************************************************************************************************************************
*********************************************************************************************************************************************************/

/***************************************************************************/
//! @brief Private Method
//! \n init_class_vars | void
/***************************************************************************/
// @param
//! @return no return
//! @details
//! \n Initialize class vars
/***************************************************************************/

bool VNH7040::init_class_vars( void )
{
    DENTER();		//Trace Enter
    ///--------------------------------------------------------------------------
    ///	VARS
    ///--------------------------------------------------------------------------

    ///--------------------------------------------------------------------------
    ///	INIT
    ///--------------------------------------------------------------------------

    ///--------------------------------------------------------------------------
    ///	BODY
    ///--------------------------------------------------------------------------

    ///--------------------------------------------------------------------------
    ///	RETURN
    ///--------------------------------------------------------------------------
    DRETURN();      //Trace Return
    return false;   //OK
}   //end method: init_class_vars | void

/*********************************************************************************************************************************************************
**********************************************************************************************************************************************************
**	PRIVATE METHODS
**********************************************************************************************************************************************************
*********************************************************************************************************************************************************/

/***************************************************************************/
//! @brief Private method
//! \n error_recovery | void |
/***************************************************************************/
//! @return return false = OK | true = fail
//! @details
//! \n Tries to recover from an error
//! \n Automatically called by get_error. 
/***************************************************************************/

bool VNH7040::error_recovery( void )
{
    DENTER(); //Trace Enter
    ///--------------------------------------------------------------------------
    ///	VARS
    ///--------------------------------------------------------------------------

    ///--------------------------------------------------------------------------
    ///	INIT
    ///--------------------------------------------------------------------------

    ///--------------------------------------------------------------------------
    ///	BODY
    ///--------------------------------------------------------------------------

    ///--------------------------------------------------------------------------
    ///	RETURN
    ///--------------------------------------------------------------------------
    DRETURN();      //Trace Return
    return true;    //FAIL
}   //end private method: error_recovery | void |

/***************************************************************************/
//! @brief Private method
//! \n dummy | void
/***************************************************************************/
// @param
//! @return bool | false = OK | true = FAIL |
//! @details
//! \n Method
/***************************************************************************/

bool VNH7040::dummy( void )
{
    DENTER(); //Trace Enter
    ///--------------------------------------------------------------------------
    ///	VARS
    ///--------------------------------------------------------------------------

    ///--------------------------------------------------------------------------
    ///	INIT
    ///--------------------------------------------------------------------------

    ///--------------------------------------------------------------------------
    ///	BODY
    ///--------------------------------------------------------------------------

    ///--------------------------------------------------------------------------
    ///	RETURN
    ///--------------------------------------------------------------------------
    DRETURN(); //Trace Return
    return false;	//OK
}   //end private method:


/**********************************************************************************
**	NAMESPACE
**********************************************************************************/

} //End Namespace: User

#else
    #warning "Multiple inclusion of hader file VNH7040_HPP_"
#endif
